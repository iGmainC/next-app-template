generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  // 用户的基本信息
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  phoneNumber    String?          @unique
  phoneVerified  DateTime?
  password       String?
  image          String?
  role           UserRole         @default(USER)
  accounts       Account[]
  sessions       Session[]
  MessageSession MessageSession[]
}

model Account {
  // OAuth登录的账号信息
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  // 用户登录的session信息
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  // 用户注册时的验证码
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model phoneVerification {
  // 用户注册时的手机验证码
  phoneNumber String
  code        String
  expires     DateTime
  verified    Boolean

  @@unique([phoneNumber, code])
}

model Company {
  // 公司信息，指ai模型的公司
  id          String      @id @default(cuid())
  name        String
  description String?
  logo        String?
  BaseModel   BaseModel[]
}

model BaseModel {
  // ai模型的基本信息
  id             String           @id @default(cuid())
  name           String
  code           String
  description    String?
  logo           String?
  // 上下文长度
  contextLength  Int              @default(1024)
  company        Company          @relation(fields: [companyId], references: [id])
  companyId      String
  Agent          Agent[]
  MessageSession MessageSession[]
}

model Agent {
  // ai模型的代理人
  id          String    @id @default(cuid())
  name        String
  description String?
  logo        String?
  BaseModel   BaseModel @relation(fields: [baseModelId], references: [id])
  baseModelId String
  Message     Message[]
}

enum MessageRole {
  user
  system
  assistant
  function
}

model Message {
  // 用来存储openai和用户的对话
  id               String          @id @default(cuid())
  role             MessageRole     @default(user)
  files            String[]
  favorite         Boolean         @default(false)
  fromAgent        Agent?          @relation(fields: [fromAgentId], references: [id])
  fromAgentId      String?
  MessageSession   MessageSession? @relation(fields: [messageSessionId], references: [id])
  messageSessionId String?
}

model MessageSession {
  // 用来存储openai和用户的对话
  id        String    @id @default(cuid())
  title     String    @default("新的对话")
  // 和用户关联
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  // 和模型关联
  model     BaseModel @relation(fields: [modelId], references: [id])
  modelId   String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
